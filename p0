#!/usr/bin/env perl

use strict;
use warnings;

our $DEBUG = sub {
    warn @_, "\n";
};

package Pegleg;

use Any::Moose;
use Carp;

has _rule_map => qw/ is ro isa HashRef lazy_build 1 /;
sub _build__rule_map { {} }
sub rule {
    my $self = shift;
    return $self->_rule_map unless @_;
    my $name = shift;
    return unless defined( my $rule = $self->_rule_map->{$name} );

    return $rule if blessed $rule && $rule->can( 'parse' );

    my $type = ref $rule;

    if ( $type eq 'ARRAY' ) {
        $rule = Pegleg::Rule::Sequence->new( sequence => $rule );
    }
    elsif ( $type eq '' ) {
        return $self->rule( $rule ); # TODO Could loop... forever...
    }
    elsif ( $type eq 'Regexp' ) {
        $rule = Pegleg::Rule::Regexp->new( regexp => $rule );
    }
    else {
        croak "Invalid rule type ($type)";
    }

    return $self->_rule_map->{$name} = $rule;
}

sub setup {
    my $self = shift;
    while( @_ ) {
        my $name = shift;
        my $body = shift;
        $self->rule->{$name} = $body;
    }
}


sub debug {
    warn @_, "\n";
}

sub parse {
    my $self = shift;
    my $input = shift;
    my $rule = shift;

    my $parse = Pegleg::Parse->new( input => $input, parser => $self );
    my $state = Pegleg::State->new( position => 0 );

    return $parse->parse( $state, $rule ); 
}

package Pegleg::Role::Rule;

use Any::Moose '::Role';

requires 'parse';

package Pegleg::Rule::Sequence;

use Any::Moose;

with qw/ Pegleg::Role::Rule /;

has sequence => qw/ is ro required 1 isa ArrayRef /;

sub parse {
    my $self = shift;
    my $parse = shift;
    my $state = shift;

    my $sequence = $self->sequence;;

    my( @result, $result );
    for my $rule (@$sequence) {
        return unless ( $result, $state ) = $parse->parse( $state, $rule );
        push @result, $result;
    }
    return ( \@result, $state );
}

package Pegleg::Rule::Regexp;

use Any::Moose;

with qw/ Pegleg::Role::Rule /;

has regexp => qw/ is ro required 1 isa Regexp /;;

sub parse {
    my $self = shift;
    my $parse = shift;
    my $state = shift;

    my $regexp = $self->regexp;
    my $input = $parse->input( $state->position );
    return unless $input =~ m/$regexp/;
    my $matched = substr( $input, $-[0], $+[0]-$-[0] );
    $state = Pegleg::State->new( position => $state->position + $+[0] );

    $DEBUG->( 'matched => ', $matched );

    return ( $matched, $state );
}

package Pegleg::Parse;

use Any::Moose;
use Carp;

has parser => qw/ is ro required 1 isa Pegleg /;

has length => qw/ is ro isa Int lazy_build 1 /;
sub _build_length { length shift->_input }

has _input => qw/ is rw isa Str required 1 init_arg input /;
has _input_cache => qw/ is ro isa HashRef lazy_build 1 /;
sub _build__input_cache { {} }

sub input {
    my $self = shift;
    return $self->_input unless @_;
    my $position = shift;
    return $self->_input_cache->{$position} ||= do {
        my $input = $self->_input;
        substr $input, $position;
    };
}

sub rule {
    my $self = shift;
    my $rule = shift;

    return $self->parser->rule( $rule ) or croak "Invalid rule ($rule)";
}

sub parse {
    my $self = shift;
    my $state = shift;
    my $rule = shift;

    $DEBUG->( "input => ", $self->input, " @ ", $state->position, " [", $self->length, "]" ); 
    $DEBUG->( "rule => $rule" ); # (", ref $rule, ")" );

    return if $state->position == $self->length;

    $rule = $self->rule( $rule );

    return $rule->parse( $self, $state );

#    debug "input => ", $parse->input, " @ ", $state->position, " [", $parse->length, "]";
#    debug "rule => $rule"; # (", ref $rule, ")";

}

package Pegleg::State;

use Any::Moose;

has position => qw/ is ro required 1 /;

package main;

use Test::Most;

plan qw/ no_plan /;

ok( 1 );

use JSON;

sub parser {
    my $parser = Pegleg->new;
    $parser->setup( @_ );
    return $parser;
}

my $parser = parser
    literal => qr/^\d*\.\d*|\d+|".*?"/,
    operator => qr/^\+|\-|\*|\/|\=\=/,
    operation => [qw/ literal operator expression /],
    expression => [qw/ operation /],
;

my @result = $parser->parse( '1+2-3', 'expression' );

print JSON->new->encode( \@result );
